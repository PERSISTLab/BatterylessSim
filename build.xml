<project name="MSPSim" default="jar" basedir=".">
  <description>
     Builds MSPSim / SIREN
  </description>

  <property name="src" location="."/>
  <property name="build" location="build"/>
  <property name="lib" location="lib"/>
  <property name="dist" location="dist"/>
  <property name="jarfile" location="${dist}/mspsim.jar"/>
  <property name="javac.debug" value="true"/>
  <property name="ant.build.javac.source" value="1.7"/>
  <property name="ant.build.javac.target" value="1.7"/>
  <property name="ARGS" value=""/>
  <!-- the jar file itself -->
  
  <path id="libraries.path">    
      <fileset dir="${lib}">
          <include name="*.jar"/>
      </fileset>
  </path>
  <path id="classpath">
    <fileset dir="${lib}" includes="**/*.jar"/>
  </path>

  <target name="init">
    <tstamp/>
    <mkdir dir="${build}"/>
    <mkdir dir="${dist}"/>
  </target>

  <target name="compile" depends="init" description="compile the source">
    <javac srcdir="${src}" destdir="${build}" classpathref="classpath"
           debug="${javac.debug}" includeantruntime="false">
      <compilerarg value="-Xlint:unchecked"/>
      <compilerarg value="-deprecation"/>
      <exclude name="tests/**" />
    </javac>
  </target>

	<target name="jar" depends="compile" description="Makes a distribution version of SIREN, into a jar file.">
		    <mkdir dir="${dist}"/>
		    <mkdir dir="${build}/${lib}"/>
		    <copy todir="${build}/${lib}" flatten="true">
		        <path refid="libraries.path"/>
		    </copy>

		    <manifestclasspath property="manifest.classpath" jarfile="${jarfile}">
		        <classpath refid="libraries.path"/>
		    </manifestclasspath>

		    <jar destfile="${jarfile}" basedir="${build}">
		        <manifest>
		            <attribute name="Main-Class" value="se.sics.mspsim.Main"/>
		            <attribute name="Class-Path" value="${manifest.classpath}"/>
		        </manifest>
		    	<fileset dir="." includes="images/*.jpg,images/*.png"/>
		    </jar>  
	</target>
	
  <target name="runesb" depends="jar" description="run MSPSim with platform ESB">
    <property name="FIRMWAREFILE" value="firmware/esb/sensor-demo.esb"/>
    <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.platform.esb.ESBNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${ARGS}"/>
    </java>
  </target>

  <target name="runsky" depends="jar" description="run MSPSim with platform Sky">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.platform.sky.SkyNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${ARGS}"/>
    </java>
  </target>

  <target name="runskyprof" depends="jar" description="run MSPSim with platform Sky for profiling">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.platform.sky.SkyNode">
      <jvmarg value="-agentlib:yjpagent" />
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${ARGS}"/>
    </java>
  </target>

  <target name="runtelos" depends="jar" description="run MSPSim with platform Telos">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.platform.sky.TelosNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${ARGS}"/>
    </java>
  </target>

  <target name="runjcreate" depends="jar" description="run MSPSim with platform Sentilla JCreate">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.platform.jcreate.JCreateNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${ARGS}"/>
    </java>
  </target>

  <target name="runsentillausb" depends="jar" description="run MSPSim with platform Sentilla Gateway USB">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.platform.sentillausb.SentillaUSBNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${ARGS}"/>
    </java>
  </target>

  <target name="runz1" depends="jar" description="run MSPSim with platform Zolertia Z1">
    <property name="FIRMWAREFILE" value="firmware/z1/blink.z1"/>
    <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.platform.z1.Z1Node">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${ARGS}"/>
    </java>
  </target>

  <target name="run" depends="jar" description="run MSPSim">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.Main">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${ARGS}"/>
    </java>
  </target>

  <target name="cputest" depends="jar" description="run MSPSim CPU test">
    <property name="FIRMWAREFILE" value="tests/cputest.sky"/>

    <available file="${FIRMWAREFILE}" type="file" property="cputest.firmware"/>
    <fail message="Please compile the cputest firmware first." unless="cputest.firmware"/>

    <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.util.Test">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${ARGS}"/>
    </java>
  </target>

  <target name="test" depends="jar"/>

  <target name="clean" description="clean up" >
    <delete dir="${build}"/>
    <delete file="${jarfile}" />
  </target>
  
  <target name="run_moo_crc_cap" depends="jar" description="Run Moo with CRC testcase and capacitor">
    <property name="FIRMWAREFILE" value="firmware/crc-vanilla2+latch"/>
      <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.platform.crfid.MooNode">
          <arg value="-nogui" />
          <arg value="-exitwhendone" />
          <arg value="${FIRMWAREFILE}" />
      </java>
  </target>

  <target name="run_moo_sense_cap" depends="jar" description="Run Moo with sense testcase and capacitor">
    <property name="FIRMWAREFILE" value="firmware/sense+latch"/>
      <java fork="true" classpath="${jarfile}" classname="se.sics.mspsim.platform.crfid.MooNode">
          <arg value="-nogui" />
          <arg value="-exitwhendone" />
          <arg value="${FIRMWAREFILE}" />
      </java>
  </target>

</project>
